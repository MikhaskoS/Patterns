using System;

namespace _01_DRY
{
    /*
        Принцип DRY – Don’t Repeat Yourself – «Не повторяйся». Идея, лежащая в основе принципа DRY
        довольно проста: фрагмент логики приложения должен быть представлен в приложении только
        однажды. Другими словами, цель, к которой следует стремиться – это исключение повторения
        произвольной части приложения.
        Программный код, повторяющийся как минимум в двух частях приложения, должен быть перенесен в
        отдельную часть приложения таким образом, чтобы эти части приложения могли к нему обращаться.
        Говоря простым языком, следует прекратить копирование кода при написании приложений.
        Синонимы термина DRY – Once and Only Once («Единожды и только единожды»), Duplication is Evil
        (DIE, «Дублирование – зло»).

        Принцип KISS («Keep it simple stupid») – не усложняй! Смысл этого принципа программирования
        заключается в том, что стоит делать максимально простую и понятную архитектуру, применять
        шаблоны проектирования и не изобретать велосипед.
        Принцип KISS перекликается со старыми концепциями:
        ● Альберт Эйнштейн, «Всё должно быть изложено так просто, как только возможно, но не
        проще».
        ● бритва Оккама, «Не следует множить сущее без необходимости».

        Принцип YAGNI («You Ain’t Gonna Need It») – вам это не понадобится! Его суть в том, чтобы
        реализовать только поставленные задачи и отказаться от избыточного функционала. Принцип YAGNI
        похож на KISS – он старается делать вещи как можно более простыми. Но KISS старается искать
        простые решения, а YAGNI – это устранение тяги программистов к излишней абстракции, к
        экспериментам «из интереса» и к реализации функционала, который сейчас не нужен, но, по мнению
        разработчика, может либо вскоре понадобиться, либо просто будет полезен, хотя в реальности такого
        очень часто не происходит.
     */
    class Program
    {
        static void Main(string[] args)
        {
            //Sample01.Demo.Test();
            Sample02.Demo.Test();
        }
    }
}
